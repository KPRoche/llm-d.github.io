"use strict";(self.webpackChunkdocusaurus_test=self.webpackChunkdocusaurus_test||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"llm-d-announce","metadata":{"permalink":"/blog/llm-d-announce","source":"@site/blog/2025-05-20_announce.md","title":"Announcing the llm-d community!","description":"Debut announcement of llm-d project and community","date":"2025-05-20T08:00:00.000Z","tags":[{"inline":false,"label":"Hello","permalink":"/blog/tags/hello","description":"Hello tag description"},{"inline":false,"label":"Welcome!","permalink":"/blog/tags/welcome","description":"Welcome tag description"},{"inline":false,"label":"llm-d release news!","permalink":"/blog/tags/llm-d","description":"llm-d tag description"}],"readingTime":10.74,"hasTruncateMarker":true,"authors":[{"name":"Robert Shaw","title":"Director of Engineering, Red Hat","url":"https://github.com/robertgshaw2-redhat","image_url":"https://avatars.githubusercontent.com/u/114415538?v=4","email":"robshaw@redhat.com","imageURL":"https://avatars.githubusercontent.com/u/114415538?v=4","socials":{},"key":null,"page":null},{"name":"Clayton Coleman","title":"Distinguished Engineer, Google","url":"https://github.com/smarterclayton","image_url":"https://avatars.githubusercontent.com/u/1163175?v=4","email":"claytoncoleman@google.com","imageURL":"https://avatars.githubusercontent.com/u/1163175?v=4","socials":{},"key":null,"page":null},{"name":"Carlos Costa","title":"Distinguished Engineer, IBM","url":"https://github.com/chcost","image_url":"https://avatars.githubusercontent.com/u/26551701?v=4","email":"chcost@us.ibm.com","imageURL":"https://avatars.githubusercontent.com/u/26551701?v=4","socials":{},"key":null,"page":null}],"frontMatter":{"title":"Announcing the llm-d community!","description":"Debut announcement of llm-d project and community","slug":"llm-d-announce","date":"2025-05-20T08:00","authors":[{"name":"Robert Shaw","title":"Director of Engineering, Red Hat","url":"https://github.com/robertgshaw2-redhat","image_url":"https://avatars.githubusercontent.com/u/114415538?v=4","email":"robshaw@redhat.com","imageURL":"https://avatars.githubusercontent.com/u/114415538?v=4"},{"name":"Clayton Coleman","title":"Distinguished Engineer, Google","url":"https://github.com/smarterclayton","image_url":"https://avatars.githubusercontent.com/u/1163175?v=4","email":"claytoncoleman@google.com","imageURL":"https://avatars.githubusercontent.com/u/1163175?v=4"},{"name":"Carlos Costa","title":"Distinguished Engineer, IBM","url":"https://github.com/chcost","image_url":"https://avatars.githubusercontent.com/u/26551701?v=4","email":"chcost@us.ibm.com","imageURL":"https://avatars.githubusercontent.com/u/26551701?v=4"}],"tags":["hello","welcome","llm-d"],"hide_table_of_contents":false},"unlisted":false,"nextItem":{"title":"llm-d Press Release","permalink":"/blog/llm-d-press-release"}},"content":"## Announcing the llm-d community\\r\\n\\r\\nllm-d is a Kubernetes-native high-performance distributed LLM inference framework  \\r\\n \\\\- a well-lit path for anyone to serve at scale, with the fastest time-to-value and competitive performance per dollar for most models across most hardware accelerators.\\r\\n\\r\\nWith llm-d, users can operationalize gen AI deployments with a modular, high-performance, end-to-end serving solution that leverages the latest distributed inference optimizations like KV-cache aware routing and disaggregated serving, co-designed and integrated with the Kubernetes operational tooling in [Inference Gateway (IGW)](https://github.com/kubernetes-sigs/gateway-api-inference-extension?tab=readme-ov-file).\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n### LLM Inference Goes Distributed\\r\\n\\r\\n#### Why Standard Scale Out Falls Short\\r\\n\\r\\nKubernetes typically scales out application workloads with uniform replicas and round-robin load balancing.\\r\\n\\r\\n![Figure 1: Deploying a service to multiple vLLM instances](../docs/assets/images/image5_46.png)\\r\\n\\r\\nThis simple pattern is very effective for most request patterns, which have the following characteristics:\\r\\n\\r\\n* Requests are short-lived and generally uniform in resource utilization  \\r\\n* Requests have generally uniform latency service level objectives (SLOs)  \\r\\n* Each replica can process each request equally well  \\r\\n* Specializing variants and coordinating replicas to process a single request is not useful\\r\\n\\r\\n#### LLM Serving Is Unique\\r\\n\\r\\nThe LLM inference workload, however, is unique with slow, non-uniform, expensive requests. This means that typical scale-out and load-balancing patterns fall short of optimal performance.\\r\\n\\r\\n![Figure 2: Comparison of modern HTTP requests](../docs/assets/images/image7_33.png)\\r\\n\\r\\nLet\u2019s take a look at each one step-by-step:\\r\\n\\r\\n*A. Requests are expensive with significant variance in resource utilization.*\\r\\n\\r\\n* Each LLM inference request has a different \u201cshape\u201d to it, as measured by the number of input tokens and output tokens. There is significant variance in these parameters across requests and workloads.   \\r\\n  * RAG has long inputs \\\\- prompt and retrieved docs \\\\- and short generated outputs  \\r\\n  * Reasoning has a short or medium inputs and long generated outputs\\r\\n\\r\\n![Figure 3: Comparing the RAG pattern and Thinking/Reasoning pattern with prefill and decode stages](../docs/assets/images/image2_4.jpg)\\r\\n\\r\\n* These differences in request times can lead to significant imbalances across instances, which are compounded as loaded instances get overwhelmed. Overloads lead to longer ITL (Inter-Token Latency), which leads to more load, which leads to more ITL.\\r\\n\\r\\n*B. Routing to specific replicas with cached prior computation can achieve orders of magnitude better latency.*\\r\\n\\r\\n* Many common LLM workloads have \u201cmulti-turn\u201d request patterns, where the same prompt is sent iteratively to the same instance.  \\r\\n  * Agentic (tool calls are iterative request flow)  \\r\\n  * Code completion task (requests reuse current codebase as context)\\r\\n\\r\\n![The agentic pattern sequence](../docs/assets/images/image8_0.jpg)\\r\\n\\r\\n* LLM inference servers like vLLM implement a method called \u201cautomatic prefix caching\u201d, which enables \u201cskipping\u201d a significant amount of prefill computation when there is a cache hit. If requests are routed to vLLM replicas that have the data in the cache, we skip computation. Increasing the likelihood of prefix cache hits with a larger cache size can dramatically improve tail latencies.\\r\\n\\r\\n![The prefix aching method](../docs/assets/images/image3.jpg)\\r\\n\\r\\n*C. Specializing and coordinating replicas to process a single request can lead to more throughput per GPU.*\\r\\n\\r\\n* Inference is split into two phases \u2013 prefill and decode.  Prefill generates the first output token and runs in parallel over all the prompt tokens \\\\- this phase is compute bound.  Decode generates tokens one at a time by doing a full pass over the model, making this phase memory bandwidth-bound.\\r\\n\\r\\n* Standard LLM deployments perform the prefill and decode phases of inference within a single replica.Given that prefill and decode phases of inference have different resource requirements, co-locating these phases on the same replica leads to inefficient resource use, especially for long sequences.\\r\\n\\r\\n* **Disaggregation** (e.g. [Distserve](https://arxiv.org/abs/2401.09670)) separates prefill and decode phases onto different variants, enabling independent optimization and scaling of each phase.  \\r\\n  * Google [leverages disaggregated serving on TPUs](https://cloud.google.com/blog/products/compute/whats-new-with-ai-hypercomputer) to provide better first-token latency and simplify operational scaling.\\r\\n\\r\\n  * DeepSeek released a [discussion of the design of their inference system](https://github.com/deepseek-ai/open-infra-index/blob/main/202502OpenSourceWeek/day_6_one_more_thing_deepseekV3R1_inference_system_overview.md), which leverages aggressive disaggregation to achieve remarkable performance at scale.\\r\\n\\r\\n![Disaggregation separates the prefill and decode phases](../docs/assets/images/image4_57.png)\\r\\n\\r\\n*D. Production deployments often have a range of quality of service (QoS) requirements.*\\r\\n\\r\\n* Use cases for a single LLM endpoint can have a wide variety of quality of service requirements. Consider the following examples:  \\r\\n  * Latency is the most important factor: Code completion requests and search responses need to minimize latency to provide an \u201cin the loop\u201d experience. O(ms) latency tolerance.  \\r\\n  * Latency is important: Chat agent sessions and email drafting with interactive use cases. O(seconds) latency tolerance.   \\r\\n  * Latency tolerant: Video call and email summarization and \u201cdeep research\u201d agents with daily or hourly usage patterns. O(minutes) latency tolerance.  \\r\\n  * Latency agnostic: Overnight batch processing workloads, meeting minute generation, and autonomous agents. O(hours) latency tolerance.\\r\\n\\r\\n* Given the compute intensity (and, therefore, high costs) of LLMs, tight latency SLOs are substantially more expensive to achieve. This spectrum of latency requirements presents an opportunity to further optimize infrastructure efficiency \u2013 the more latency tolerant a workload is, the more we can optimize infrastructure efficiency amongst other workloads.\\r\\n\\r\\n### Why llm-d?\\r\\n\\r\\nTo exploit these characteristics and achieve optimal performance for LLM workloads, the inference serving landscape is rapidly transitioning towards distributed cluster-scale architectures. For instance, in its \u201cOpen Source Week\u201d, the DeepSeek team published the design of its [inference system](https://github.com/deepseek-ai/open-infra-index/blob/main/202502OpenSourceWeek/day_6_one_more_thing_deepseekV3R1_inference_system_overview.md), which aggressively leverages disaggregation and KV caching to achieve remarkable performance per $ of compute.\\r\\n\\r\\nHowever, for most GenAI innovators, ML platform teams, and IT operations groups, these benefits remain out of reach. Building and operating a complex, monolithic system is time-consuming and challenging, especially in the context of the rapid pace of innovation and enterprise deployments with tens or hundreds of models for divergent use cases. This complexity risks time to market, higher operational costs and sprawl, and difficulty adopting and experimenting.\\r\\n\\r\\n#### Our Objective\\r\\n\\r\\nThe objective of llm-d is to create a well-lit path for anyone to adopt the leading distributed inference optimizations *within their existing deployment framework* \\\\- Kubernetes.\\r\\n\\r\\nTo achieve this goal, we have the following design principles for the project:\\r\\n\\r\\n* **Operationalizability:** modular and resilient architecture with native integration into Kubernetes via Inference Gateway API  \\r\\n* **Flexibility:** cross-platform (active work to support NVIDIA, Google TPU, AMD, and Intel), with extensible implementations of key composable layers of the stack  \\r\\n* **Performance**: leverage distributed optimizations like disaggregation and prefix-aware routing to achieve the highest tok/$ while meeting SLOs\\r\\n\\r\\n#### Architecture\\r\\n\\r\\nTo achieve this objective, we designed llm-d with a modular and layered architecture on top of industry-standard open-source technologies \\\\- vLLM, Kubernetes, and Inference Gateway.\\r\\n\\r\\n\\r\\n* [**vLLM**. vLLM](https://docs.vllm.ai/en/latest/) is the leading open-source LLM inference engine, supporting a wide range of models (including Llama and DeepSeek) and hardware accelerators (including NVIDIA GPU, Google TPU, AMD ) with high performance. \\r\\n\\r\\n* [**Kubernetes**](https://kubernetes.io/docs/home/) **(K8s)**. K8s is an open source container orchestration engine for automating deployment, scaling, and management of containerized applications. It is the industry standard for deploying and updating LLM inference engines across various hardware accelerators.\\r\\n\\r\\n* [**Inference Gateway**](https://gateway-api-inference-extension.sigs.k8s.io/) **(IGW)**. IGW is an official Kubernetes project that extends the [Gateway API](https://gateway-api.sigs.k8s.io/) (the next generation of Kubernetes Ingress and Load Balancing API) with inference-specific routing. IGW includes many important features like model routing, serving priority, and extensible scheduling logic for \u201csmart\u201d load balancing. IGW integrates with many different gateway implementations, such as Envoy, making it widely portable across Kubernetes clusters.\\r\\n\\r\\n![](../docs/assets/images/llm-d-arch-simplified.svg)\\r\\n\\r\\nAnd our key new contributions:\\r\\n\\r\\n* **vLLM Optimized Inference Scheduler** \\\\- IGW defines a pattern for customizable \u201csmart\u201d load-balancing via the [Endpoint Picker Protocol (EPP)](https://github.com/kubernetes-sigs/gateway-api-inference-extension/tree/main/docs/proposals/004-endpoint-picker-protocol). Leveraging enhanced operational telemetry exposed by vLLM, the inference scheduler implements the filtering and scoring algorithms necessary to make \u201csmart\u201d scheduling decisions around disaggregated serving, prefix-cache-awareness, and load-awareness, validated to be used out-of-the-box by llm-d users. Advanced teams can also tweak or implement their own scorers and filterers to further customize for their use cases, while still benefiting from upcoming operational features in the inference gateway, like flow control and latency-aware balancing.  \\r\\n  * For more details, see our Northstar: [\\\\[PUBLIC\\\\] llm-d Scheduler Northstar](https://docs.google.com/document/d/1kE1LY8OVjiOgKVD9-9Po96HODbTIbgHp4qgvw06BCOc/edit?tab=t.0)\\r\\n\\r\\n* **Disaggregated Serving with [vLLM](https://github.com/vllm-project/vllm) \\\\-** llm-d leverages vLLM\u2019s recently enabled support for disaggregated serving via a pluggable KV Connector API to run prefill and decode on independent instances, using high-performance transport libraries like [NVIDIA\u2019s NIXL](https://github.com/ai-dynamo/nixl).    \\r\\n    \\r\\n  In llm-d, we plan to support two \u201cwell-lit\u201d paths for prefill/decode (P/D) disaggregation:  \\r\\n  * Latency optimized implementation using fast interconnects (IB, RDMA, ICI)  \\r\\n  * Throughput optimized implementation using data center networking  \\r\\n  * For more details, see our Northstar:[\\\\[PUBLIC\\\\] llm-d Disaggregated Serving Northstar](https://docs.google.com/document/d/1FNN5snmipaTxEA1FGEeSH7Z_kEqskouKD1XYhVyTHr8/edit?tab=t.0#heading=h.ycwld2oth1kj)\\r\\n\\r\\n* **Disaggregated Prefix Caching with vLLM** \\\\-  llm-d uses the same vLLM KV connector API used in disaggregated serving to provide a pluggable cache for previous calculations, including offloading KVs to host, remote storage, and systems like [LMCache](https://github.com/LMCache/LMCache).   \\r\\n    \\r\\n  In llm-d, we plan to support two \u201cwell-lit\u201d paths for KV cache disaggregation:  \\r\\n  * Independent caching with basic offloading to host memory and disk, providing a zero operational cost mechanism that utilizes all system resources  \\r\\n  * Shared caching with KV transfer between instances and shared storage with global indexing, providing potential for higher performance at the cost of a more operationally complex system.  \\r\\n  * For more details, see our Northstar: [\\\\[PUBLIC\\\\] llm-d Prefix Caching Northstar](https://docs.google.com/document/d/1d-jKVHpTJ_tkvy6Pfbl3q2FM59NpfnqPAh__Uz_bEZ8/edit?tab=t.0#heading=h.6qazyl873259)\\r\\n\\r\\n* **Variant Autoscaling over Hardware, Workload, and Traffic** \\\\- Accelerator hardware varies dramatically in terms of compute, memory, and cost, workloads sharing the same models vary by their required quality of service, the distinct phases of LLM inference and large mixture-of-expert models vary on whether they are compute, memory, or network bound, and incoming traffic varies over time and by workload. Today, all of these decisions are made at deployment time, and almost all deployers struggle to enable autoscaling to reduce their costs safely.\\r\\n\\r\\n  Drawing on extensive experience from end users and OSS collaborators like AIBrix, we plan to implement a traffic- and hardware-aware autoscaler that:  \\r\\n  * Measures the capacity of each model server instance  \\r\\n  * Derive a load function that takes into account different request shapes and QoS  \\r\\n  * Using the recent traffic mix \\\\- QPS (Queries Per Second), QoS, and shape distribution \\\\- calculate the optimal mix of instances to handle prefill, decode, and latency-tolerant requests, and label each instance with a grouping  \\r\\n  * Report load metrics per grouping that allows Kubernetes horizontal pod autoscaling to match hardware in use to hardware needed without violating SLOs  \\r\\n  * For more details, see our Northstar: [\\\\[PUBLIC\\\\] llm-d Autoscaling Northstar](https://docs.google.com/document/d/1inTneLEZTv3rDEBB9KLOB9K6oMq8c3jkogARJqdt_58/edit?tab=t.0)\\r\\n\\r\\n#### Example llm-d Features\\r\\n\\r\\nllm-d integrates IGW and vLLM together, enabling a high performance distributed serving stack. Let\u2019s discuss some of the example features enabled by llm-d.\\r\\n\\r\\n**Prefix and KV cache-aware routing**\\r\\n\\r\\nThe first key collaboration between IGW and vLLM in llm-d was developing prefix-cache aware routing to complement the existing KV cache utilization aware load balancing in IGW. \\r\\n\\r\\nWe conducted a series of experiments to evaluate the performance of the [llm-d-inference-scheduler](https://github.com/llm-d/llm-d-inference-scheduler) with prefix-aware routing on 2 NVIDIA 8xH100 nodes using the [LMbenchmark in a long-input/short-output configuration designed](https://github.com/LMCache/LMBenchmark/tree/main/synthetic-multi-round-qa) to stress KV cache reuse and routing decision quality. \\r\\n\\r\\n|  | Model | Configuration | ISL | OSL | Latency SLO |\\r\\n| :---- | :---- | :---- | :---- | :---- | :---- |\\r\\n| **S1** | LlaMA 4 Scout FP8 | TP2, 2 replicas | 20,000 | 100 | None |\\r\\n| **S2** | LlaMA 4 Scout FP8 | TP2, 4 replicas | 12,000 | 100 | P95 TTFT \\\\<= 2s |\\r\\n| **S3** | Llama 3.1 70B FP16 | TP2, 4 replicas | 8,000 | 100 | P95 TTFT \\\\<= 2s |\\r\\n\\r\\n# ![](../docs/assets/images/image1_116.png)\\r\\n\\r\\n**Key Observations:**\\r\\n\\r\\n* **S1:** At 4 QPS, llm-d achieves a mean TTFT approximately 3X lower than the baseline (lower is better).  \\r\\n* **S2:** llm-d delivers \\\\~50% higher QPS than the baseline while meeting SLO requirements (higher is better).  \\r\\n* **S3:** llm-d sustains 2X the baseline QPS under SLO constraints (higher is better).\\r\\n\\r\\nThese results show that llm-d\u2019s cache- and prefix-aware scheduling effectively reduces TTFT and increases QPS compared to the baseline, while consistently meeting SLA requirements.\\r\\n\\r\\nTry it out with the \\\\`base.yaml\\\\` config in our [quickstart](https://github.com/llm-d/llm-d-deployer/tree/main/quickstart). And as a customization example, see the  [template](https://github.com/llm-d/llm-d-inference-scheduler/blob/main/docs/create_new_filter.md) for adding your own scheduler filter.\\r\\n\\r\\n**P/D disaggregation**\\r\\n\\r\\nWe\u2019ve completed an initial implementation of P/D disaggregation with vLLM and llm-d-inference-scheduler, which delivers promising speedups for prefill-heavy workloads (20:1 ISL | OSL). Our next focus is finalizing the implementation with heterogeneous TP and completing comprehensive benchmarks for disaggregated serving. Short-term priorities include enabling heterogeneous TP, scaling with high-performance P/D \\\\+ EP\\\\<\\\\>DP for large scale MoEs, and DP-aware load balancing. We will follow up with a detailed performance blog in the coming weeks.\\r\\n\\r\\nTry it out with the pd-nixl.yaml config in our [quickstart](https://github.com/llm-d/llm-d-deployer/tree/main/quickstart). \\r\\n\\r\\n### Get started with llm-d\\r\\n\\r\\nllm-d builds brings together the performance of vLLM with the operationalizability of Kuberentes, creating a modular architecture for distributed LLM inference, targeting high performance on the latest models and agentic architectures.\\r\\n\\r\\nWe welcome AI engineers and researchers to join the llm-d community and contribute:\\r\\n\\r\\n* Check out our repository on Github: [https://github.com/llm-d/llm-d](https://github.com/llm-d/llm-d)   \\r\\n* Join our developer slack: [https://inviter.co/llm-d-slack](https://inviter.co/llm-d-slack)  \\r\\n* Try out our quick starts to deploy llm-d on your Kubernetes cluster: [https://github.com/llm-d/llm-d-deployer/tree/main/quickstart](https://github.com/llm-d/llm-d-deployer/tree/main/quickstart)\\r\\n\\r\\nPlease join us. The future of AI is open."},{"id":"llm-d-press-release","metadata":{"permalink":"/blog/llm-d-press-release","source":"@site/blog/2025-05-20_News.md","title":"llm-d Press Release","description":"Official Press Release for llm-d","date":"2025-05-20T00:00:00.000Z","tags":[{"inline":false,"label":"News Releases","permalink":"/blog/tags/news-releases","description":"Used for \\"official\\" news releases in the blog"}],"readingTime":11.14,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"llm-d Press Release","description":"Official Press Release for llm-d","slug":"llm-d-press-release","tags":["news"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Announcing the llm-d community!","permalink":"/blog/llm-d-announce"}},"content":"## May 20, 2025\\r\\n\\r\\n# **Red Hat Launches the llm-d Community, Powering Distributed Gen AI Inference at Scale**\\r\\n\\r\\n Forged in collaboration with founding contributors CoreWeave, Google Cloud, IBM Research and NVIDIA and joined by industry leaders AMD, Cisco, Hugging Face, Intel, Lambda and Mistral AI and university supporters at the University of California, Berkeley, and the University of Chicago, the project aims to make production generative AI as omnipresent as Linux\\r\\n\\r\\n \x3c!-- truncate --\x3e\\r\\n\\r\\n**BOSTON \u2013 RED HAT SUMMIT \u2013 MAY 20, 2025 \u2014** Red Hat, the world\'s leading provider of open source solutions, today announced the launch of llm-d, a new open source project that answers the most crucial need of generative AI\u2019s (gen AI) future: Inference at scale. Tapping breakthrough inference technologies for gen AI at scale, llm-d is powered by a native Kubernetes architecture, vLLM-based distributed inference and intelligent AI-aware network routing, empowering robust, large language model (LLM) inference clouds to meet the most demanding production service-level objectives (SLOs).\\r\\n\\r\\nWhile training remains vital, the true impact of gen AI hinges on more efficient and scalable inference \\\\- the engine that transforms AI models into actionable insights and user experiences. According to Gartner[^1], \u201cBy 2028, as the market matures, more than 80% of data center workload accelerators will be specifically deployed for inference as opposed to training use.\u201d This underscores that the future of gen AI lies in the ability to execute. The escalating resource demands of increasingly sophisticated and larger reasoning models limits the viability of centralized inference and threatens to bottleneck AI innovation with prohibitive costs and crippling latency.\\r\\n\\r\\n### Answering the need for scalable gen AI inference with llm-d\\r\\n\\r\\nRed Hat and its industry partners are directly confronting this challenge with llm-d, a visionary project that amplifies the power of vLLM to transcend single-server limitations and unlock production at scale for AI inference. Using the proven orchestration prowess of Kubernetes, llm-d integrates advanced inference capabilities into existing enterprise IT infrastructures. This unified platform empowers IT teams to meet the diverse serving demands of business-critical workloads, all while deploying innovative techniques to maximize efficiency and dramatically minimize the total cost of ownership (TCO) associated with high-performance AI accelerators.\\r\\n\\r\\nllm-d delivers a powerful suite of innovations, highlighted by:\\r\\n\\r\\n* **vLLM**, which has quickly become the open source de facto standard inference server, providing day 0 model support for emerging frontier models, and support for a broad list of accelerators, now including Google Cloud Tensor Processor Units (TPUs).   \\r\\n* **Prefill and Decode Disaggregation** to separate the input context and token generation phases of AI into discrete operations, where they can then be distributed across multiple servers.  \\r\\n* **KV (key-value) Cache Offloading**, based on LMCache, shifts the memory burden of the KV cache from GPU memory to more cost-efficient and abundant standard storage, like CPU memory or network storage.  \\r\\n* **Kubernetes-powered clusters and controllers** for more efficient scheduling of compute and storage resources as workload demands fluctuate, while maintaining performance and lower latency.  \\r\\n* **AI-Aware Network Routing** for scheduling incoming requests to the servers and accelerators that are most likely to have hot caches of past inference calculations.  \\r\\n* **High-performance communication APIs** for faster and more efficient data transfer between servers, with support for NVIDIA Inference Xfer Library (NIXL).\\r\\n\\r\\n### llm-d: Backed by industry leaders \\r\\n\\r\\nThis new open source project has already garnered the support of a formidable coalition of leading gen AI model providers, AI accelerator pioneers, and premier AI cloud platforms. CoreWeave, Google Cloud, IBM Research and NVIDIA are founding contributors, with AMD, Cisco, Hugging Face, Intel, Lambda and Mistral AI as partners, underscoring the industry\u2019s deep collaboration to architect the future of large-scale LLM serving. The llm-d community is further joined by founding supporters at the Sky Computing Lab at the University of California, originators of vLLM, and the LMCache Lab at the University of Chicago, originators of [LMCache](https://github.com/LMCache/LMCache)*.*\\r\\n\\r\\nRooted in its unwavering commitment to open collaboration, Red Hat recognizes the critical importance of vibrant and accessible communities in the rapidly evolving landscape of gen AI inference. Red Hat will actively champion the growth of the llm-d community, fostering an inclusive environment for new members and fueling its continued evolution.\\r\\n\\r\\n### Red Hat\u2019s vision: Any model, any accelerator, any cloud.\\r\\n\\r\\nThe future of AI must be defined by limitless opportunity, not constrained by infrastructure silos. Red Hat sees a horizon where organizations can deploy any model, on any accelerator, across any cloud, delivering an exceptional, more consistent user experience without exorbitant costs. To unlock the true potential of gen AI investments, enterprises require a universal inference platform \\\\- a standard for more seamless, high-performance AI innovation, both today and in the years to come.\\r\\n\\r\\nJust as Red Hat pioneered the open enterprise by transforming Linux into the bedrock of modern IT, the company is now poised to architect the future of AI inference. vLLM\u2019s potential is that of a linchpin for standardized gen AI inference, and Red Hat is committed to building a thriving ecosystem around not just the vLLM community but also llm-d for distributed inference at scale. The vision is clear: regardless of the AI model or the underlying accelerator or the deployment environment, Red Hat intends to make vLLM the definitive open standard for inference across the new hybrid cloud. \\r\\n\\r\\n**Red Hat Summit**  \\r\\nJoin the Red Hat Summit keynotes to hear the latest from Red Hat executives, customers and partners:\\r\\n\\r\\n* [**Modernized infrastructure meets enterprise-ready AI**](https://events.experiences.redhat.com/widget/redhat/sum25/SessionCatalog2025/session/1737554802676001HJ8q) \u2014 Tuesday, May 20, 8-10 a.m. EDT ([YouTube](https://youtube.com/live/Gr8jomztY2s?feature=share))  \\r\\n* [**Hybrid cloud evolves to deliver enterprise innovation**](https://events.experiences.redhat.com/widget/redhat/sum25/SessionCatalog2025/session/1737554802763001Hr0T) \u2014 Wednesday, May 21, 8-9:30 a.m. EDT ([YouTube](https://youtube.com/live/g0K0pJIKHBU?feature=share))\\r\\n\\r\\n**Supporting Quotes**  \\r\\n*Brian Stevens, senior vice president and AI CTO, Red Hat*  \\r\\n\u201cThe launch of the llm-d community, backed by a vanguard of AI leaders, marks a pivotal moment in addressing the need for scalable gen AI inference, a crucial obstacle that must be overcome to enable broader enterprise AI adoption. By tapping the innovation of vLLM and the proven capabilities of Kubernetes, llm-d paves the way for distributed, scalable and high-performing AI inference across the expanded hybrid cloud, supporting any model, any accelerator, on any cloud environment and helping realize a vision of limitless AI potential.\u201d\\r\\n\\r\\n*Ramine Roane, corporate vice president, AI Product Management, AMD*  \\r\\n\\"AMD is proud to be a founding member of the llm-d community, contributing our expertise in high-performance GPUs to advance AI inference for evolving enterprise AI needs. As organizations navigate the increasing complexity of generative AI to achieve greater scale and efficiency, AMD looks forward to meeting this industry demand through the llm-d project.\\"\\r\\n\\r\\n*Shannon McFarland, vice president, Cisco Open Source Program Office & Head of Cisco DevNet*  \\r\\n\u201cThe llm-d project is an exciting step forward for practical generative AI. llm-d empowers developers to programmatically integrate and scale generative AI inference, unlocking new levels of innovation and efficiency in the modern AI landscape. Cisco is proud to be part of the llm-d community, where we\u2019re working together to explore real-world use cases that help organizations apply AI more effectively and efficiently.\u201d\\r\\n\\r\\n*Chen Goldberg, senior vice president, Engineering, CoreWeave*  \\r\\n\u201cCoreWeave is proud to be a founding contributor to the llm-d project and to deepen our long-  \\r\\nstanding commitment to open source AI. From our early partnership with EleutherAI to our ongoing work advancing inference at scale, we\u2019ve consistently invested in making powerful AI infrastructure more accessible. We\u2019re excited to collaborate with an incredible group of partners  \\r\\nand the broader developer community to build a flexible, high-performance inference engine  \\r\\nthat accelerates innovation and lays the groundwork for open, interoperable AI.\u201d\\r\\n\\r\\n*Mark Lohmeyer, vice president and general manager, AI & Computing Infrastructure, Google Cloud*  \\r\\n\\"Efficient AI inference is paramount as organizations move to deploying AI at scale and deliver value for their users. As we enter this new age of inference, Google Cloud is proud to build upon our legacy of open source contributions as a founding contributor to the llm-d project. This new community will serve as a critical catalyst for distributed AI inference at scale, helping users realize enhanced workload efficiency with increased optionality for their infrastructure resources.\\"\\r\\n\\r\\n*Jeff Boudier, Head of Product, Hugging Face*  \\r\\n\u201cWe believe every company should be able to build and run their own models. With vLLM leveraging the Hugging Face transformers library as the source of truth for model definitions; a wide diversity of models large and small is available to power text, audio, image and video AI applications. Eight million AI Builders use Hugging Face to collaborate on over two million AI models and datasets openly shared with the global community. We are excited to support the llm-d project to enable developers to take these applications to scale.\u201d\\r\\n\\r\\n*Priya Nagpurkar, vice president, Hybrid Cloud and AI Platform, IBM Research*  \\r\\n\u201cAt IBM, we believe the next phase of AI is about efficiency and scale. We\u2019re focused on unlocking value for enterprises through AI solutions they can deploy effectively. As a founding contributor to llm-d, IBM is proud to be a key part of building a differentiated hardware agnostic distributed AI inference platform. We\u2019re looking forward to continued contributions towards the growth and success of this community to transform the future of AI inference.\u201d\\r\\n\\r\\n*Bill Pearson, vice president, Data Center & AI Software Solutions and Ecosystem, Intel*  \\r\\n\u201cThe launch of llm-d will serve as a key inflection point for the industry in driving AI transformation at scale, and Intel is excited to participate as a founding supporter.  Intel\u2019s involvement with llm-d is the latest milestone in our decades-long collaboration with Red Hat to empower enterprises with open source solutions that they can deploy anywhere, on their platform of choice. We look forward to further extending and building AI innovation through the llm-d community.\u201d  \\r\\n\\r\\n *Eve Callicoat, senior staff engineer, ML Platform, Lambda*  \\r\\n\\"Inference is where the real-world value of AI is delivered, and llm-d represents a major leap forward. Lambda is proud to support a project that makes state-of-the-art inference accessible, efficient, and open.\\"\\r\\n\\r\\n*Ujval Kapasi, vice president, Engineering AI Frameworks, NVIDIA*  \\r\\n\u201cThe llm-d project is an important addition to the open source AI ecosystem and reflects NVIDIA\u2019s support for collaboration to drive innovation in generative AI. Scalable, highly performant inference is key to the next wave of generative and agentic AI. We\u2019re working with Red Hat and other supporting partners to foster llm-d community engagement and industry adoption, helping accelerate llm-d with innovations from NVIDIA Dynamo such as NIXL.\u201d\\r\\n\\r\\n*Ion Stoica, Professor and Director of Sky Computing Lab, University of California, Berkeley*   \\r\\n\u201cWe are pleased to see Red Hat build upon the established success of vLLM, which originated in our lab to help address the speed and memory challenges that come with running large AI models. Open source projects like vLLM, and now llm-d anchored in vLLM, are at the frontier of AI innovation tackling the most demanding AI inference requirements and moving the needle for the industry at large.\u201d \\r\\n\\r\\n*Junchen Jiang, CS Professor, LMCache Lab, University of Chicago*   \\r\\n\u201cDistributed KV cache optimizations, such as offloading, compression, and blending, have been a key focus of our lab, and we are excited to see llm-d leveraging LMCache as a core component to reduce time to first token as well as improve throughput, particularly in long-context inference.\u201d\\r\\n\\r\\n**Additional Resources**\\r\\n\\r\\n* Learn more about [llm-d](https://www.llm-d.ai)  \\r\\n* Read more about [vLLM](https://www.redhat.com/en/topics/ai/what-is-vllm)  \\r\\n* Find out more about [contributing to llm-d](https://github.com/llm-d)  \\r\\n* Learn more about [Red Hat Summit](http://red.ht/I2Zk1e)  \\r\\n* See all of Red Hat\u2019s announcements this week in the [Red Hat Summit newsroom](https://red.ht/3QrRUAh)  \\r\\n* Follow [@RedHatSummit](https://twitter.com/redhatsummit) or [\\\\#RHSummit](https://twitter.com/hashtag/rhsummit) on X for event-specific updates\\r\\n\\r\\n**Connect with Red Hat**\\r\\n\\r\\n* Learn more about [Red Hat](http://red.ht/IOS5vm)  \\r\\n* Get more news in the [Red Hat newsroom](http://red.ht/1qeXuma)  \\r\\n* Read the [Red Hat blog](http://red.ht/1zzgkXp)  \\r\\n* Follow [Red Hat on X](https://red.ht/3Ghe0TT.)  \\r\\n* Follow [Red Hat on Instagram](https://red.ht/4iBsqwB)  \\r\\n* Follow [Red Hat on LinkedIn](https://red.ht/4hHewrv)  \\r\\n* Watch [Red Hat videos on YouTube](https://red.ht/44B8oxL)\\r\\n\\r\\n**About Red Hat**  \\r\\n[Red Hat](https://www.redhat.com/en) is the open hybrid cloud technology leader, delivering a trusted, consistent and comprehensive foundation for transformative IT innovation and AI applications. Its portfolio of cloud, developer, AI, Linux, automation and application platform technologies enables any application, anywhere\u2014from the datacenter to the edge. As the world\'s leading provider of enterprise open source software solutions, Red Hat invests in open ecosystems and communities to solve tomorrow\'s IT challenges. Collaborating with partners and customers, Red Hat helps them build, connect, automate, secure and manage their IT environments, supported by consulting services and [award-winning](https://access.redhat.com/recognition) training and certification offerings.\\r\\n\\r\\n**Forward-Looking Statements**  \\r\\nExcept for the historical information and discussions contained herein, statements contained in this press release may constitute forward-looking statements within the meaning of the Private Securities Litigation Reform Act of 1995\\\\. Forward-looking statements are based on the company\u2019s current assumptions regarding future business and financial performance. These statements involve a number of risks, uncertainties and other factors that could cause actual results to differ materially. Any forward-looking statement in this press release speaks only as of the date on which it is made. Except as required by law, the company assumes no obligation to update or revise any forward-looking statements.\\r\\n\\r\\n**Media Contact:**  \\r\\nJohn Terrill  \\r\\nRed Hat  \\r\\n\\\\+1-571-421-8132  \\r\\n[jterrill@redhat.com](mailto:jterrill@redhat.com)\\r\\n\\r\\n*\\\\#\\\\#\\\\#*\\r\\n\\r\\n*Red Hat and the Red Hat logo are trademarks or registered trademarks of Red Hat, Inc. or its subsidiaries in the U.S. and other countries.* \\r\\n\\r\\n[^1]:  Forecast Analysis: AI Semiconductors, Worldwide, Alan Priestley, Gartner, 2 August 2024 \\\\- ID G00818912 GARTNER is a registered trademark and service mark of Gartner, Inc. and/or its affiliates in"}]}}')}}]);